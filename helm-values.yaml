airflow:
  executor: KubernetesExecutor
config:
  AIRFLOW__CORE__EXECUTOR:
    value: KubernetesExecutor

  image:
    repository: apache/airflow
    tag: "2.5.1"

  database:
    user: airflow
    password: airflow
    host: airflow-db
    port: 5432
    db: airflow

  airflowHome: /opt/airflow

  rbac:
    create: true

webserver:
  webserverConfig: |
    from flask_appbuilder.security.manager import AUTH_OAUTH
    from airflow.www.security import AirflowSecurityManager
    import requests
    import logging

    log = logging.getLogger(__name__)
    OIDC_ISSUER = "https://dev-70294059.okta.com/oauth2/default"

    AUTH_TYPE = AUTH_OAUTH
    AUTH_ROLE_PUBLIC = 'Public'
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = "Viewer"
    AUTH_ROLES_SYNC_AT_LOGIN = True
    PERMANENT_SESSION_LIFETIME = 1800

    AUTH_ROLES_MAPPING = {
        "SVC_DataCOE_Analyst": ["Admin"],
        "SVC_*": ["Viewer"]
    }

    class CustomSecurityManager(AirflowSecurityManager):
        def get_oauth_user_info(self, provider, response):
            if provider == "okta":
                token = response.get("access_token")
                userinfo = requests.get(
                    "https://dev-70294059.okta.com/oauth2/default/v1/userinfo",
                    headers={"Authorization": f"Bearer {token}"}
                ).json()

                log.info(f"Okta userinfo: {userinfo}")

                groups = userinfo.get("groups", [])
                if not groups:
                    groups = ["Public"]

                return {
                    "username": userinfo.get("preferred_username", userinfo.get("email")),
                    "email": userinfo.get("email"),
                    "first_name": userinfo.get("given_name"),
                    "last_name": userinfo.get("family_name"),
                    "role_keys": groups,
                }

    SECURITY_MANAGER_CLASS = CustomSecurityManager

    OAUTH_PROVIDERS = [
        {
            'name': 'okta',
            'icon': 'fa-circle-o',
            'token_key': 'access_token',
            'remote_app': {
                'client_id': '0oaoelqqkzF52HT2J5d7',
                'client_secret': 'MS5tiT2t6tlguCc1jOOEGYtzJIGvQ697Dh615ZPjJMScSTcjkXRfvAFW5-fWgazx',
                'jwks_uri': 'https://dev-70294059.okta.com/oauth2/default/v1/keys',
                'api_base_url': 'https://dev-70294059.okta.com',
                'access_token_url': 'https://dev-70294059.okta.com/oauth2/default/v1/token',
                'authorize_url': 'https://dev-70294059.okta.com/oauth2/default/v1/authorize',
                'userinfo_endpoint': 'https://dev-70294059.okta.com/oauth2/default/v1/userinfo',
                'client_kwargs': {
                    'scope': 'openid profile email groups'
                }
            }
        }
    ]

  replicas: 2

  service:
    type: LoadBalancer

scheduler:
  replicas: 2

workers:
  replicas: 3

dags:
  gitSync:
    enabled: true
    repo: git@github.com:nkdyo454/airflow-deployment-aks.git
    branch: main
    subPath: 'dags'
    rev: 'HEAD'
    depth: 1
    sshKeySecret: airflow-ssh-secret
    knownHosts: |
      github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=


resources:
  webserver:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"
  scheduler:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"
  workers:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"
